////
/// Text utilities
/// @group core-utilities
/// @author Benjamin Fleming
////


// Settings
// --------

/// Controls whether styles in this file (text) are generated.
/// @type Boolean
$sl-generate-text: $sl-generate !default;


// Asserts
// -------

@include sl-assert($sl-generate-text, 'bool');


// Mixins
// ------

/// Turns an element into a textbox
/// @require {function} sl-shorthand
/// @require {function} sl-sum
/// @param {Number} $font-size [1em]
/// @param {Number | List} $padding [0]
/// @param {Number | List} $border-width [0]
/// @param {Number} $line-height [1]
/// @param {Boolean} $multiline [false]
/// @output
@mixin sl-textbox(
	$font-size: 1em,
	$padding: 0,
	$border-width: 0,
	$line-height: 1,
	$multiline: false
) {
	$line-height: if($multiline, $line-height, 1);

	//
	// Calculate the line height offset
	//

	@if $line-height != 1 and $line-height != 1em and $line-height != 100% {
		$lh: $line-height * if(unitless($line-height), 1em, 1);

		$p-top:    sl-shorthand($padding, top);
		$p-right:  sl-shorthand($padding, right);
		$p-bottom: sl-shorthand($padding, bottom);
		$p-left:   sl-shorthand($padding, left);
		$lh-bleed: ($font-size / 2), ($lh / -2);

		// Add a fallback for browsers that don't support CSS3 calc()
		$p-top-fb:    sl-sum((unit($p-top): $font-size), $p-top, $lh-bleed);
		$p-bottom-fb: sl-sum((unit($p-bottom): $font-size), $p-bottom, $lh-bleed);
		padding: max($p-top-fb, 0) max($p-right, 0) max($p-bottom-fb, 0) max($p-left, 0);

		$p-top:    sl-sum('calc', $p-top, $lh-bleed);
		$p-bottom: sl-sum('calc', $p-bottom, $lh-bleed);

		$padding: max($p-top, 0) max($p-right, 0) max($p-bottom, 0) max($p-left, 0);
	}

	//
	// Apply styles
	//

	display: inline-block;
	vertical-align: middle; // Fixes a weird extra margin bug in chrome when using hidden overflow with inline block
	font-size: $font-size;
	padding: $padding;
	border-width: $border-width;
	// Assign this as usually this is what is wanted, though it can be overridden.
	border-style: solid;
	line-height: $line-height;

	//
	// Apply single line styles
	//

	@if not $multiline {
		$p-top: sl-shorthand($padding, top);
		$p-bottom: sl-shorthand($padding, bottom);
		$bw-top: sl-shorthand($border-width, top);
		$bw-bottom: sl-shorthand($border-width, bottom);

		$height-values: (
			$p-top, $p-bottom,
			$bw-top, $bw-bottom,
			$line-height * 1em
		);

		overflow: hidden;
		// Assume padding is dominant, so prioritize its unit.
		height: sl-sum( (unit($p-top): $font-size), $height-values);
		height: sl-sum('calc', $height-values);
		white-space: nowrap;
		text-overflow: ellipsis;
	}
}


// Styles
// ------

@if $sl-generate-text {

	@each $align-name, $align-value in (l: left, c: center, r: right, j: justify) {

		@include sl-utility($align-name + '-text', 'text-' + $align-value) {
			text-align: $align-value !important;
		}
	}

	@each $breakpoint-name, $breakpoint-value in $sl-breakpoints {

		@include sl-from($breakpoint-name) {

			@each $align-name, $align-value in (l: left, c: center, r: right, j: justify) {

				@include sl-utility($align-name + '-text' + sl-prefix('breakpoint') + $breakpoint-name) {
					text-align: $align-value !important;
				}
			}
		}
	}

	@include sl-utility('truncate') {
		overflow: hidden !important;
		max-width: 100% !important;
		white-space: nowrap !important;
		text-overflow: ellipsis !important;
	}
}
