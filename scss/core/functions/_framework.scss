////
/// Framework
/// @group core-functions
/// @author Benjamin Fleming
////


// Maps
// ----

/// Gets a prefix value. Just a readable wrapper for `map-get()` on `$sl-prefixes`.
/// @require {variable} $sl-prefixes
/// @param {String} $type - The prefix type
/// @return {String}
@function sl-prefix($type) {
	@return map-get($sl-prefixes, $type);
}

/// Gets a sizes value. Just a readable wrapper for `map-get()` on `$sl-sizes`.
/// @require {variable} $sl-sizes
/// @param {String} $type - The size type
/// @return {Number}
@function sl-size($type) {
	@return map-get($sl-sizes, $type);
}

/// Gets a breakpoints value. Just a readable wrapper for `map-get()` on `$sl-breakpoints`.
/// @require {variable} $sl-breakpoints
/// @param {String} $type - The breakpoint type
/// @return {Number}
@function sl-breakpoint($type) {
	@return map-get($sl-breakpoints, $type);
}

/// Gets a gutters value. Just a readable wrapper for `map-get()` on `$sl-gutters`.
/// @require {variable} $sl-gutters
/// @param {String | Number} $types - The gutter types or values
/// @return {Number}
@function sl-gutter($types...) {
	$types: sl-flatten($types);
	$output: ();

	@each $type in $types {
		$gutter: if(map-has_key($sl-gutters, $type), map-get($sl-gutters, $type), $type);
		$output: join($output, $gutter, 'space');
	}

	@return $output;
}

/// Gets a divisions value. Just a readable wrapper for `map-get()` on `$sl-divisions`.
/// @require {variable} $sl-divisions
/// @param {String} $type - The division type
/// @return {Number}
@function sl-division($type) {
	@return map-get($sl-divisions, $type);
}


// Prefixes
// --------

/// Creates a usable selector name from a prefix and a name.
/// @require {variable} sl-prefixes
/// @param {String} $type - The prefix type. The value is retrieved from the $sl-prefixes map.
/// @param {String} $name - The name of the class to be prefixed.
/// @param {String} $value [false] - An optional value which is used as a breakpoint or attribute value.
/// @return {String} The prefixed selector name
@function sl-name($type, $name, $value: false) {
	$output: '';

	@if $type == 'attribute' {
		$output: '[' + sl-prefix($type) + $name + if($value == false, '', '="' + $value + '"') + ']';
	} @else {
		$output: '.' + sl-prefix($type) + $name + if($value == false, '' , sl-prefix('breakpoint') + $value);
	}

	@return $output;
}

/// Creates a starlight selector using the set prefixes and a multidimensional list of names.
/// @require {function} sl-name
/// @param {String | List} $type - If a string, the prefix is retrieved from the `$sl-prefixes` map. If a list (of size
///   2), the first value is treated as a selector string, and the second prefix type. This allows prefixing entire
///   selectors.
/// @param {String | List} $names - Each name passed is prefixed and separated by a comma. If a name is also a list
///   each item of that is prefixed and joined together.
/// @return {String} Selector
@function sl-selector($type, $names) {
	// TODO Support values
	$output: '';
	$comma: '';
	$selector: '';

	// If the type is comprised of a selector and a prefix type, separate them out.
	@if type-of($type) == list {
		$selector: nth($type, 1);
		$type: nth($type, 2);
	}

	@each $name in $names {
		$output: $output + $comma;
		$comma: ',';

		@if type-of($name) == list {
			$first: true;
			@each $part in $name {
				@if $part {
					$output: $output
						+ if($first, $selector, '')
						+ sl-name($type, $part);
					$first: false;
				}
			}
		} @elseif $name {
			$output: $output
				+ $selector
				+ sl-name($type, $name);
		}
	}

	@return $output;
}

/// Creates a module class name.
/// @require {function} sl-name
/// @param {String} $name - The name of the module.
/// @return {String} The module class name
@function sl-module($name) {
	@return sl-name('module', $name);
}

/// Creates a utility class name.
/// @require {function} sl-name
/// @param {String} $name - The name of the utility.
/// @param {String} $breakpoint [false] - The optional name of the breakpoint.
/// @return {String} The utility class name
@function sl-utility($name, $breakpoint: false) {
	@return sl-name('utility', $name);
}

/// Creates a parameter class name with optional breakpoint identifier.
/// @require {function} sl-name
/// @param {String} $name - The name of the parameter.
/// @param {String} $breakpoint [false] - The optional name of the breakpoint.
/// @return {String} The parameter class name
@function sl-parameter($name, $breakpoint: false) {
	@return sl-name('parameter', $name, $breakpoint);
}

/// Creates a state class name.
/// @require {function} sl-name
/// @param {String} $name - The name of the state.
/// @return {String} The state class name
@function sl-state($name) {
	@return sl-name('state', $name);
}

/// Creates a feature class name.
/// @require {function} sl-name
/// @param {String} $name - The name of the feature.
/// @return {String} The feature class name
@function sl-feature($name) {
	@return sl-name('feature', $name);
}

/// Creates a featureless class name.
/// @require {function} sl-name
/// @param {String} $name - The name of the feature.
/// @return {String} The featureless class name
@function sl-featureless($name) {
	@return sl-name('featureless', $name);
}

/// Creates an attribute name.
/// @require {function} sl-name
/// @param {String} $name - The name of the attribute.
/// @param {String} $value - The optional value of the attribute.
/// @return {String} The prefixed attribute name
@function sl-attribute($name, $value: false) {
	@return sl-name('attribute', $name, $value);
}
