////
/// Removes prefixes from selected mixins and functions. Variables cannot be unprefixed as they must be able to handle
/// being changed.
/// @group core
/// @author Benjamin Fleming
////


// Functions / Framework
// ---------------------

/// Gets a sizes value. Just an unprefixed wrapper for `sl-sizes()`.
/// @require {function} sl-size
/// @param {String} $type - The size type
/// @return {Number}
@function size($type) {
	@return sl-size($type);
}

/// Gets a breakpoints value. Just an unprefixed wrapper for `sl-breakpoints()`.
/// @require {function} sl-breakpoint
/// @param {String} $type - The breakpoint type
/// @return {Number}
@function breakpoint($type) {
	@return sl-breakpoint($type);
}

/// Gets a gutters value. Just an unprefixed wrapper for `sl-gutters()`.
/// @require {function} sl-gutter
/// @param {String} $type - The gutter type
/// @return {Number}
@function gutter($type) {
	@return sl-gutter($type);
}

/// Gets a divisions value. Just an unprefixed wrapper for `sl-division()`.
/// @require {function} sl-division
/// @param {String} $type - The division type
/// @return {Number}
@function division($type) {
	@return sl-division($type);
}

/// Creates a module class name. Just an unprefixed wrapper for `sl-module()`.
/// @require {function} sl-module
/// @param {String} $name - The name of the module.
/// @return {String} The module class name
@function module($name) {
	@return sl-module($name);
}

/// Creates a utility class name. Just an unprefixed wrapper for `sl-utility()`.
/// @require {function} sl-utility
/// @param {String} $name - The name of the utility.
/// @param {String} $breakpoint [false] - The optional name of the breakpoint.
/// @return {String} The utility class name
@function utility($name, $breakpoint: false) {
	@return sl-utility($name, $breakpoint);
}

/// Creates a parameter class name with optional breakpoint identifier. Just an unprefixed wrapper for `sl-parameter()`.
/// @require {function} sl-parameter
/// @param {String} $name - The name of the parameter.
/// @param {String} $breakpoint [false] - The optional name of the breakpoint.
/// @return {String} The parameter class name
@function parameter($name, $breakpoint: false) {
	@return sl-parameter($name, $breakpoint);
}

/// Creates a state class name. Just an unprefixed wrapper for `sl-state()`.
/// @require {function} sl-state
/// @param {String} $name - The name of the state.
/// @return {String} The state class name
@function state($name) {
	@return sl-state($name);
}

/// Creates a feature class name. Just an unprefixed wrapper for `sl-feature()`.
/// @require {function} sl-feature
/// @param {String} $name - The name of the feature.
/// @return {String} The feature class name
@function feature($name) {
	@return sl-feature($name);
}

/// Creates a featureless class name. Just an unprefixed wrapper for `sl-featureless()`.
/// @require {function} sl-featureless
/// @param {String} $name - The name of the feature.
/// @return {String} The featureless class name
@function featureless($name) {
	@return sl-featureless($name);
}

/// Creates an attribute name. Just an unprefixed wrapper for `sl-attribute()`.
/// @require {function} sl-attribute
/// @param {String} $name - The name of the attribute.
/// @param {String} $value - The optional value of the attribute.
/// @return {String} The prefixed attribute name
@function attribute($name, $value: false) {
	@return sl-attribute($name, $value);
}


// Functions / List
// ----------------

/// Returns the "top" value of a list. Useful to extract individual side values from CSS short-hand lists like paddings.
/// @require {function} sl-shorthand
/// @param {List | Map} $list
/// @return {*}
@function top($list) {
	@return sl-shorthand($list, top);
}

/// Returns the "right" value of a list. Useful to extract individual side values from CSS short-hand lists like
/// paddings.
/// @require {function} sl-shorthand
/// @param {List | Map} $list
/// @return {*}
@function right($list) {
	@return sl-shorthand($list, right);
}

/// Returns the "bottom" value of a list. Useful to extract individual side values from CSS short-hand lists like
/// paddings.
/// @require {function} sl-shorthand
/// @param {List | Map} $list
/// @return {*}
@function bottom($list) {
	@return sl-shorthand($list, bottom);
}

/// Returns the "left" value of a list. Useful to extract individual side values from CSS short-hand lists like
/// paddings.
/// @require {function} sl-shorthand
/// @param {List | Map} $list
/// @return {*}
@function left($list) {
	@return sl-shorthand($list, left);
}


// Functions / Number
// ------------------

/// Sum a list of values, either converting them all to a single unit or outputting them as a CSS3 calc() value. This is
/// a unprefixed wrapper function for the `sl-sum` function.
/// @require {function} sl-sum
/// @param {Number | String | Map} $format
/// @param {Number} $values
/// @return {Number | String}
@function sum($format: 'calc', $values...) {
	@return sl-sum($format, $values);
}

/// Converts a number (or list of numbers) to pixels.
/// @require {function} sl-convert
/// @param {Number | List | Map} $value - The number (or list or map of numbers) to convert
/// @param {Number} $factor [null] - The number to convert against (when converting between absolute and relative values)
///   This is defaulted to the global font size set in the settings file.
/// @return {Number | List | Map} The converted number (or list or map of numbers) in pixels
@function px($value, $factor: null) {
	@return sl-convert($value, 'px', $factor);
}

/// Converts a number (or list of numbers) to EM's.
/// @require {function} sl-convert
/// @param {Number | List | Map} $value - The number (or list or map of numbers) to convert
/// @param {Number} $factor [null] - The number to convert against (when converting between absolute and relative values)
///   This is defaulted to the global font size set in the settings file.
/// @return {Number | List | Map} The converted number (or list or map of numbers) in EM's
@function em($value, $factor: null) {
	@return sl-convert($value, 'em', $factor);
}

/// Converts a number (or list of numbers) to relative EM's.
/// @require {function} sl-convert
/// @param {Number | List | Map} $value - The number (or list or map of numbers) to convert
/// @param {Number} $factor [null] - The number to convert against (when converting between absolute and relative values)
///   This is defaulted to the global font size set in the settings file.
/// @return {Number | List | Map} The converted number (or list or map of numbers) in relative EM's
@function rem($value, $factor: null) {
	@return sl-convert($value, 'rem', $factor);
}

/// Converts a number (or list of numbers) to a percentage.
/// @require {function} sl-convert
/// @param {Number | List | Map} $value - The number (or list or map of numbers) to convert
/// @param {Number} $factor [null] - The number to convert against (when converting between absolute and relative values)
///   This is defaulted to the global font size set in the settings file.
/// @return {Number | List | Map} The converted number (or list or map of numbers) as a percentage
@function percent($value, $factor: null) {
	@return sl-convert($value, '%', $factor);
}

/// Converts a number (or list of numbers) to a decimal.
/// @require {function} sl-convert
/// @param {Number | List | Map} $value - The number (or list or map of numbers) to convert
/// @param {Number} $factor [null] - The number to convert against (when converting between absolute and relative values)
///   This is defaulted to the global font size set in the settings file.
/// @return {Number | List | Map} The converted number (or list or map of numbers) as a decimal
@function decimal($value, $factor: null) {
	@return sl-convert($value, '', $factor);
}


// Components / Button
// -------------------

/// A mixin for styling buttons. Just an unprefixed wrapper for the `sl-button()` mixin.
/// @require {mixin} sl-button
/// @param {Number} $font-size [1em]
/// @param {Number | List} $padding [0]
/// @param {Number | List} $border-width [0]
/// @param {Number} $line-height [1]
/// @param {Boolean} $multiline [false]
/// @output
@mixin button(
	$font-size: 1em,
	$padding: 0,
	$border-width: 0,
	$line-height: 1,
	$multiline: false
) {
	@include sl-button(
		$font-size,
		$padding,
		$border-width,
		$line-height,
		$multiline
	);
}


// Components / Field
// ------------------

/// A mixin for styling input, select and textarea elements. Just an unprefixed wrapper for the `sl-field()` mixin.
/// @require {mixin} sl-field
/// @param {Number} $font-size [1em]
/// @param {Number | List} $padding [0]
/// @param {Number | List} $border-width [0]
/// @param {Number} $line-height [1]
/// @output
@mixin field(
	$font-size: 1em,
	$padding: 0,
	$border-width: 0,
	$line-height: 1
) {
	@include sl-field(
		$font-size,
		$padding,
		$border-width,
		$line-height
	);
}


// Structures / Structure
// ----------------------

/// Turns an element into a structural module. Just an unprefixed wrapper for the `sl-structure()` mixin.
/// @require {variable} sl-structure-h-gap-property
/// @require {variable} sl-structure-child-selector
/// @require {mixin} sl-structure
/// @param {String} $h-align [left] - Either left, right, center or justify
/// @param {String} $v-align [left] - Either top, bottom, center or fill
/// @param {Number} $h-gap [0] - The horizontal spacing between children
/// @param {Number} $v-gap [0] - The vertical spacing between children
/// @param {Boolean} $h-outer-gap [false] - Whether to add an outside horizontal gap to the children. Uses the value set
///   in $h-gap.
/// @param {Boolean} $v-outer-gap [false] - Whether to add an outside vertical gap to the children. Uses the value set
///   in $v-gap.
/// @param {Boolean} $reversed [false] - Whether to reverse the order of the children.
/// @param {String} $h-gap-property [$sl-structure-h-gap-property] - Whether the horizontal gap is applied using borders
///   (border) or paddings (padding).
/// @param {String} $child-selector [$sl-structure-child-selector] - The selector for the structure child element.
/// @output Styles for a structural module. Will output up to two more selectors - one for the child elements, and
///   one for the after pseudo element if the horizontal gap is set to justify.
@mixin sl-structure(
	$h-align: left,
	$v-align: top,
	$h-gap: 0,
	$v-gap: 0,
	$h-outer-gap: false,
	$v-outer-gap: false,
	$reversed: false,
	$h-gap-property: $sl-structure-h-gap-property,
	$child-selector: $sl-structure-child-selector
) {
	@include sl-structure(
		$h-align,
		$v-align,
		$h-gap,
		$v-gap,
		$h-outer-gap,
		$v-outer-gap,
		$reversed,
		$h-gap-property,
		$child-selector
	)
}


// Utilities / Clearfix
// --------------------

/// The clearfix mixin. Just an unprefixed wrapper for the `sl-clearfix` mixin.
/// @output Styles on the :before and :after pseudo selectors that handle float clearing.
@mixin clearfix {
	@include sl-clearfix;
}


// Utilities / Media
// -----------------

/// Simple media query abstraction for expressive and maintainable media queries. Just an unprefixed wrapper for the
/// `sl-media()` mixin.
/// @require {mixin} sl-media
/// @param {String} $device [all]
/// @param {Number | List | String} $from [null]
/// @param {Number | List | String} $until [null]
/// @param {String} $property [width]
/// @content Styles to go inside the media query
/// @output Media query following the parameters passed
@mixin media(
	$device: all,
	$from: null,
	$until: null,
	$property: width
) {
	@include sl-media(
		$device,
		$from,
		$until,
		$property
	) {
		@content;
	}
}

/// Media query from a minimum value. Just an unprefixed wrapper for the `sl-from` mixin.
/// @require {mixin} sl-from
/// @param {Number | List | String} $value
/// @param {String} $property [width]
/// @content Styles to go inside the media query
/// @output Media query following the parameters passed
@mixin from($value, $property: width) {
	@include sl-from($value, $property) {
		@content;
	}
}

/// Media query from a maximum value. Just an unprefixed wrapper for the `sl-until` mixin.
/// @require {mixin} sl-until
/// @param {Number | List | String} $value
/// @param {String} $property [width]
/// @content Styles to go inside the media query
/// @output Media query following the parameters passed
@mixin until($value, $property: width) {
	@include sl-until($value, $property) {
		@content;
	}
}

/// Media query only at a certain breakpoint label. Just an unprefixed wrapper for the `sl-breakpoint` mixin.
/// @require {mixin} sl-breakpoint
/// @param {String} $value
/// @param {String} $direction [from]
/// @param {String} $property [width]
/// @content Styles to go inside the media query
/// @output Media query following the parameters passed
@mixin breakpoint(
	$breakpoint,
	$direction: 'from',
	$property: width
) {
	@include sl-breakpoint(
		$breakpoint,
		$direction,
		$property
	) {
		@content;
	}
}

/// Shorthand media queries to be used within selectors. Just an unprefixed wrapper for the `sl-responsive` mixin.
/// @require {mixin} sl-responsive
/// @param {Map} $map
/// @param {String} $property [width]
/// @param {String} $direction [from]
/// @output Set of media queries containing the properties passed
@mixin responsive(
	$map,
	$property: width,
	$direction: from
) {
	@include sl-responsive(
		$map,
		$property,
		$direction
	);
}

/// Outputs properties and their values, and handles breakpoints on each property. Just an unprefixed wrapper for the
/// `sl-properties` mixin.
/// @require {mixin} sl-properties
/// @param {Map} $map
/// @param {String} $property [width]
/// @param {String} $direction [from]
/// @output List of properties and their values, and possibly a set of media queries containing properties.
@mixin properties(
	$map,
	$property: width,
	$direction: from
) {
	@include sl-properties(
		$map,
		$property,
		$direction
	);
}


// Utilities / Selectors
// ---------------------

/// An alias for passing 'module' as the type to the sl-selector mixin.
/// @require {function} sl-selector
/// @param {List} $names - Each name passed is prefixed and separated by a comma. If a name is also a list, each item of
///   that is prefixed and joined together.
/// @content Styles for the module selector
/// @output The module selector and the passed styles
@mixin module($names...) {
	#{sl-selector('module', $names)} {
		@content;
	}
}

/// An alias for passing 'utility' as the type to the sl-selector mixin.
/// @require {function} sl-selector
/// @param {List} $names - Each name passed is prefixed and separated by a comma. If a name is also a list, each item of
///   that is prefixed and joined together.
/// @content Styles for the utility selector
/// @output The utility selector and the passed styles
@mixin utility($names...) {
	#{sl-selector('utility', $names)} {
		@content;
	}
}

/// An alias for passing 'parameter' as the type to the sl-selector mixin.
/// @require {function} sl-selector
/// @param {List} $names - Each name passed is prefixed and separated by a comma. If a name is also a list, each item of
///   that is prefixed and joined together.
/// @content Styles for the parameter selector
/// @output The parameter selector and the passed styles
@mixin parameter($names...) {
	#{sl-selector('&' 'parameter', $names)} {
		@content;
	}
}

/// An alias for passing 'state' as the type to the sl-selector mixin.
/// @require {function} sl-selector
/// @param {List} $names - Each name passed is prefixed and separated by a comma. If a name is also a list, each item of
///   that is prefixed and joined together.
/// @content Styles for the state selector
/// @output The state selector and the passed styles
@mixin state($names...) {
	#{sl-selector('&' 'state', $names)} {
		@content;
	}
}

/// An alias for passing 'feature' as the type to the sl-selector mixin.
/// @require {function} sl-selector
/// @param {List} $names - Each name passed is prefixed and separated by a comma. If a name is also a list, each item of
///   that is prefixed and joined together.
/// @content Styles for the feature selector
/// @output The feature selector and the passed styles
@mixin feature($names...) {
	#{sl-selector('&' 'feature', $names)} {
		@content;
	}
}

/// An alias for passing 'featureless' as the type to the sl-selector mixin.
/// @require {function} sl-selector
/// @param {List} $names - Each name passed is prefixed and separated by a comma. If a name is also a list, each item of
///   that is prefixed and joined together.
/// @content Styles for the featureless selector
/// @output The featureless selector and the passed styles
@mixin featureless($names...) {
	#{sl-selector('&' 'featureless', $names)} {
		@content;
	}
}


// Utilities / Text
// ----------------

/// Turns an element into a textbox. Just an unprefixed wrapper for the `sl-textbox()` mixin.
/// @require {function} sl-textbox
/// @param {Number} $font-size [1em]
/// @param {Number | List} $padding [0]
/// @param {Number | List} $border-width [0]
/// @param {Number} $line-height [1]
/// @param {Boolean} $multiline [false]
/// @output
@mixin textbox(
	$font-size: 1em,
	$padding: 0,
	$border-width: 0,
	$line-height: 1,
	$multiline: false
) {
	@include sl-textbox(
		$font-size,
		$padding,
		$border-width,
		$line-height,
		$multiline
	);
}
