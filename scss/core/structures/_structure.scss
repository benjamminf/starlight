////
/// Structure
/// @group core-structures
/// @author Benjamin Fleming
////


// Settings
// --------

/// Whether the horizontal gap is applied using borders (border) or paddings (padding).
/// @type String
$sl-structure-h-gap-property: border !default;

/// The selector for the structure child element.
/// @type String
$sl-structure-child-selector: '*' !default;


// Asserts
// -------

@include sl-assert($sl-structure-h-gap-property, 'string');
@include sl-assert($sl-structure-child-selector, 'string');


// Mixins
// ------

/// Turns an element into a structural module.
/// @require {variable} sl-structure-h-gap-property
/// @require {variable} sl-structure-child-selector
/// @param {String} $h-align [left] - Either left, right, center or justify
/// @param {String} $v-align [left] - Either top, bottom, center or fill
/// @param {Number} $h-gap [0] - The horizontal spacing between children
/// @param {Number} $v-gap [0] - The vertical spacing between children
/// @param {Boolean} $h-outer-gap [false] - Whether to add an outside horizontal gap to the children. Uses the value set
///   in $h-gap.
/// @param {Boolean} $v-outer-gap [false] - Whether to add an outside vertical gap to the children. Uses the value set
///   in $v-gap.
/// @param {Boolean} $reversed [false] - Whether to reverse the order of the children.
/// @param {String} $h-gap-property [$sl-structure-h-gap-property] - Whether the horizontal gap is applied using borders
///   (border) or paddings (padding).
/// @param {String} $child-selector [$sl-structure-child-selector] - The selector for the structure child element.
/// @output Styles for a structural module. Will output up to two more selectors - one for the child elements, and
///   one for the after pseudo element if the horizontal gap is set to justify.
@mixin sl-structure(
	$h-align: left,
	$v-align: top,
	$h-gap: 0,
	$v-gap: 0,
	$h-outer-gap: false,
	$v-outer-gap: false,
	$reversed: false,
	$h-gap-property: $sl-structure-h-gap-property,
	$child-selector: $sl-structure-child-selector
) {
	$h-gap-half: ($h-gap / 2);
	$v-gap-half: ($v-gap / 2);

	@include sl-display-flex;
	@include sl-flex-flow(row wrap);
	@include sl-justify-content(map-get((
		left: if($reversed, flex-end, flex-start),
		right: if($reversed, flex-start, flex-end),
		center: center,
		justify: space-between
	), $h-align));
	@include sl-align-items(map-get((
		top: flex-start,
		bottom: flex-end,
		center: center,
		fill: stretch
	), $v-align));

	pointer-events: none; // Negative margins mouse event fix
	direction: if($reversed, rtl, ltr);
	word-spacing: -1em; // Remove spacing between items
	margin: if($v-outer-gap, 0, -$v-gap) if($h-outer-gap, 0, -$h-gap-half) 0;
	padding: 0 if($h-outer-gap, $h-gap-half, 0) if($v-outer-gap, $v-gap, 0);
	text-align: map-get((
		left: if($reversed, right, left),
		right: if($reversed, left, right),
		center: center,
		justify: justify
	), $h-align );

	> #{$child-selector} {
		pointer-events: auto; // Negative margins mouse event fix
		display: inline-block;
		direction: ltr;
		vertical-align: map-get((
			top: top,
			bottom: bottom,
			center: middle,
			fill: top
		), $v-align );
		width: auto;
		min-height: 1px; // Fix for empty blocks
		margin: if($v-gap > 0, $v-gap, 0) 0 0;
		word-spacing: normal;
		text-align: left;
		list-style: none;

		@if $h-gap-half > 0 {

			@if $h-gap-property == border {
				border-left: $h-gap-half solid transparent;
				border-right: $h-gap-half solid transparent;
				background-clip: padding-box; // Borders are used for gaps, so clip backgrounds at paddings

			} @else if $h-gap-property == padding {
				padding: 0 $h-gap-half;
			}
		}
	}

	@if $h-align == justify {

		&:after {
			content: '';
			display: inline-block;
			width: 100%;
			height: 0;
		}
	}
}


// Styles
// ------

%sl-structure {
	@include sl-structure;

	//
	// Reverse
	//

	@include sl-parameter('reversed') {
		@include sl-justify-content(flex-end);

		direction: rtl;
		text-align: right;

		> * {
			direction: ltr;
		}
	}

	//
	// Alignment
	//

	@include sl-parameter('h-align-left', 'reversed' 'h-align-right') {
		@include sl-justify-content(flex-start);

		text-align: left;
	}

	@include sl-parameter('h-align-right', 'reversed' 'h-align-left') {
		@include sl-justify-content(flex-end);

		text-align: right;
	}

	@include sl-parameter('h-align-center') {
		@include sl-justify-content(center);

		text-align: center;
	}

	@include sl-parameter('h-align-justify') {
		@include sl-justify-content(space-between);

		text-align: justify;

		&:after {
			content: '';
			display: inline-block;
			width: 100%;
			height: 0;
		}
	}

	@include sl-parameter('v-align-top') {
		@include sl-align-items(flex-start);

		> * {
			vertical-align: top;
		}
	}

	@include sl-parameter('v-align-center') {
		@include sl-align-items(center);

		> * {
			vertical-align: middle;
		}
	}

	@include sl-parameter('v-align-bottom') {
		@include sl-align-items(flex-end);

		> * {
			vertical-align: bottom;
		}
	}

	@include sl-parameter('v-align-fill') {
		@include sl-align-items(stretch);
	}

	//
	// Gutters
	//

	@each $gutter-name, $gutter-value in $sl-gutters {
		$gutter-half: ($gutter-value / 2);

		@include sl-parameter('h-gap-' + $gutter-name) {
			margin-left: -$gutter-half;
			margin-right: -$gutter-half;

			@include sl-parameter('h-outer-gap') {
				margin-left: 0;
				margin-right: 0;
				padding-left: $gutter-half;
				padding-right: $gutter-half;
			}

			> * {

				@if $sl-structure-h-gap-property == border {
					border-left: $gutter-half solid transparent;
					border-right: $gutter-half solid transparent;
					background-clip: padding-box; // Borders are used for gaps, so clip backgrounds at paddings

				} @else if $sl-structure-h-gap-property == padding {
					padding: 0 $gutter-half;
				}
			}
		}

		@include sl-parameter('v-gap-' + $gutter-name) {
			margin-top: -$gutter-value;

			@include sl-parameter('v-outer-gap') {
				margin-top: 0;
				padding-top: 0;
				padding-bottom: $gutter-value;
			}

			> * {
				margin-top: $gutter-value;
			}
		}
	}
}
