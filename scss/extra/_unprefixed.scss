////
/// Removes prefixes from selected mixins and functions. Variables cannot be unprefixed as they must be able to handle
/// being changed.
/// @group extra
/// @author Benjamin Fleming
////


// Functions / Style
// -----------------

/// Retrieves the color from the color map setting. Just an unprefixed wrapper for `sl-color()`.
/// @require {function} sl-color
/// @param {String | Color} $name - The name of the color
/// @param {Number} $alpha - The transparency of the color as a decimal
/// @return {Color} A CSS color
@function color($name, $alpha: auto) {
	@return sl-color($name, $alpha);
}

/// Retrieves the font from the font map setting. Just an unprefixed wrapper for `sl-font()`.
/// @require {function} sl-font
/// @param {String} $name - The name of the font
/// @return {String | List} The font or list of fonts and font types
@function font($name) {
	@return sl-font($name);
}

/// Retrieves the font weight from the weight map setting. Just an unprefixed wrapper for `sl-font-weight()`.
/// @require {function} sl-font-weight
/// @param {String} $name - The name of the font
/// @param {String} $weight - The name of the font weight
/// @return {Number | String} The font weight
@function font-weight($name, $weight) {
	@return sl-font-weight($name, $weight);
}

/// Retrieves the font weight from the weight map setting, with optional properties to be used as a transition value.
/// Just an unprefixed wrapper for `sl-transition()`.
/// @require {function} sl-transition
/// @param {String} $name - The name of the transition
/// @param {List | String} $properties - The list of properties
/// @return {List} The transition value
@function transition($name, $properties: false) {
	@return sl-transition($name, $weight);
}


// Components / Icon
// -----------------

/// Turns an element into an icon module. Just an unprefixed wrapper for the `sl-icon()` mixin.
/// @require {variable} sl-icon-size
/// @require {variable} sl-icon-font
/// @require {variable} sl-icon-sprite
/// @require {mixin} sl-icon
/// @param {Number} $size [$sl-icon-size]
/// @param {String | Boolean} $font [$sl-icon-font]
/// @param {String | Boolean} $sprite [$sl-icon-sprite]
/// @output
@mixin icon(
	$size: $sl-icon-size,
	$font: $sl-icon-font,
	$sprite: $sl-icon-sprite
) {
	@include sl-icon(
		$size,
		$font,
		$sprite
	);
}


// Components / Float Label
// ------------------------

/// A mixin that creates a general field with a floating label that responds to focus and filling of the field. Just an
/// unprefixed wrapper for the `sl-float-label()` mixin.
/// @require {mixin} sl-float-label
/// @param {Number} $font-size [1em]
/// @param {Number} $label-font-size [$font-size]
/// @param {Number} $small-label-font-size [$font-size]
/// @param {Number} $padding [0]
/// @param {Number} $border-width [0]
/// @param {Number} $line-height [1]
/// @param {Number} $field-shift [0]
/// @param {Number} $label-shift [0]
/// @param {Boolean} $shift-on-focus [false]
/// @param {Boolean} $secondary-label [false]
/// @param {String} $field-selector ['> input, > select, > textarea']
/// @param {String} $label-selector ['> label']
/// @param {String} $secondary-label-selector ['&:before']
/// @output
@mixin float-label(
	$font-size: 1em,
	$label-font-size: $font-size,
	$small-label-font-size: $font-size,
	$padding: 0,
	$border-width: 0,
	$line-height: 1,
	$field-shift: 0,
	$label-shift: 0,
	$shift-on-focus: false,
	$secondary-label: false,
	$field-selector: '> input, > select, > textarea',
	$label-selector: '> label',
	$secondary-label-selector: '&:before'
) {
	@include sl-float-label(
		$font-size,
		$label-font-size,
		$small-label-font-size,
		$padding,
		$border-width,
		$line-height,
		$field-shift,
		$label-shift,
		$shift-on-focus,
		$secondary-label,
		$field-selector,
		$label-selector,
		$secondary-label-selector
	);
}


// Utilities / Content
// -------------------

/// Adds quotation marks to an element that surround any text inside. Just an unprefixed wrapper for the `sl-quotes()`
/// mixin.
/// @require {variable} sl-quotes-double
/// @require {variable} sl-quotes-single
/// @require {mixin} sl-quotes
/// @param {List} outer [$sl-quotes-double]
/// @param {List} inner [$sl-quotes-single]
/// @content Styles to target the surrounding quotes.
/// @output
@mixin quotes($outer: $sl-quotes-double, $inner: $sl-quotes-single) {
	@include sl-quotes($outer, $inner);
}


// Utilities / Shape
// -----------------

/// Converts an element into a triangle using border hacks. Just an unprefixed wrapper for the `sl-triangle()` mixin.
/// @param {String} $direction - Either top/up, topright/upright, right, bottomright/downright, bottom/down,
///   bottomleft/downleft, left or topleft/upleft
/// @param {Color} $color - The color of the arrow
/// @param {Number} $size
/// @param {Number} $point-size [$size * 0.866] - Defaults to portion of $size to output an equilateral triangle
/// @output Border styles
@mixin triangle(
	$direction,
	$color,
	$size,
	$point-size: $size * 0.866
) {
	@include sl-triangle(
		$direction,
		$color,
		$size,
		$point-size
	)
}

/// Sets the color of a triangle. Just an unprefixed wrapper for the `sl-triangle-color()` mixin.
/// @param {String} $direction - Either top/up, topright/upright, right, bottomright/downright, bottom/down,
///   bottomleft/downleft, left or topleft/upleft
/// @param {Color} $color - The color of the arrow
@mixin triangle-color($direction, $color) {
	@include sl-triangle-color($direction, $color);
}
